// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: spec/api/v1/prodigyservice.proto

package prodigyservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProdigyService_StreamMessages_FullMethodName = "/prodigyservice.ProdigyService/StreamMessages"
)

// ProdigyServiceClient is the client API for ProdigyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdigyServiceClient interface {
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ProdigyService_StreamMessagesClient, error)
}

type prodigyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdigyServiceClient(cc grpc.ClientConnInterface) ProdigyServiceClient {
	return &prodigyServiceClient{cc}
}

func (c *prodigyServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ProdigyService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdigyService_ServiceDesc.Streams[0], ProdigyService_StreamMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &prodigyServiceStreamMessagesClient{stream}
	return x, nil
}

type ProdigyService_StreamMessagesClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type prodigyServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *prodigyServiceStreamMessagesClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodigyServiceStreamMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdigyServiceServer is the server API for ProdigyService service.
// All implementations must embed UnimplementedProdigyServiceServer
// for forward compatibility
type ProdigyServiceServer interface {
	StreamMessages(ProdigyService_StreamMessagesServer) error
	mustEmbedUnimplementedProdigyServiceServer()
}

// UnimplementedProdigyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdigyServiceServer struct {
}

func (UnimplementedProdigyServiceServer) StreamMessages(ProdigyService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedProdigyServiceServer) mustEmbedUnimplementedProdigyServiceServer() {}

// UnsafeProdigyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdigyServiceServer will
// result in compilation errors.
type UnsafeProdigyServiceServer interface {
	mustEmbedUnimplementedProdigyServiceServer()
}

func RegisterProdigyServiceServer(s grpc.ServiceRegistrar, srv ProdigyServiceServer) {
	s.RegisterService(&ProdigyService_ServiceDesc, srv)
}

func _ProdigyService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdigyServiceServer).StreamMessages(&prodigyServiceStreamMessagesServer{stream})
}

type ProdigyService_StreamMessagesServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type prodigyServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *prodigyServiceStreamMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodigyServiceStreamMessagesServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdigyService_ServiceDesc is the grpc.ServiceDesc for ProdigyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdigyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prodigyservice.ProdigyService",
	HandlerType: (*ProdigyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _ProdigyService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spec/api/v1/prodigyservice.proto",
}
